definitions:
  models.ChangePassword:
    properties:
      email:
        example: john.doe@gmail.com
        type: string
      newPassword:
        example: newPassword
        minLength: 8
        type: string
      oldPassword:
        example: password
        minLength: 8
        type: string
    required:
    - email
    - newPassword
    - oldPassword
    type: object
  models.Customer:
    properties:
      email:
        example: john.doe@gmail.com
        type: string
      id:
        type: integer
      name:
        example: John Doe
        maxLength: 50
        minLength: 3
        type: string
      pancard:
        example: ABCDE1234F
        type: string
      password:
        example: password
        minLength: 8
        type: string
      phoneNumber:
        example: 1234567890
        type: integer
    required:
    - email
    - name
    - pancard
    - password
    - phoneNumber
    type: object
  models.SignInCredentials:
    properties:
      email:
        example: john.doe@gmail.com
        type: string
      password:
        example: password
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.User:
    properties:
      createdAt:
        example: "2024-04-17 07:39:20"
        type: string
      email:
        example: sanket@gmail.com
        type: string
      otp:
        example: 8393
        type: integer
    required:
    - email
    - otp
    type: object
host: localhost:8080
info:
  contact: {}
  description: api for Stock Broker using gin and gorm
  title: Stock Broker Application
  version: "2.0"
paths:
  /customer-changepassword:
    patch:
      consumes:
      - application/json
      description: Change a user's password
      parameters:
      - description: Change Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Change Password
      tags:
      - Authentication
  /customer-otpvalidate:
    post:
      consumes:
      - application/json
      description: Validates the OTP for the user provided in the request body.
      parameters:
      - description: User data including OTP for validation
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OTP validation successful
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: OTP validation failed
          schema:
            type: string
      summary: Validate OTP for user
      tags:
      - Authentication
  /customer-signin:
    post:
      consumes:
      - application/json
      description: Signs in a user with provided credentials.
      parameters:
      - description: Sign In Credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SignInCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: User signed in successfully
          schema:
            $ref: '#/definitions/models.SignInCredentials'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: User Sign In
      tags:
      - users
  /customer-signup:
    post:
      consumes:
      - application/json
      description: Register a new customer and save their data in the database.
      parameters:
      - description: Customer data
        in: body
        name: customerRecords
        required: true
        schema:
          $ref: '#/definitions/models.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
      summary: Register a new customer
securityDefinitions:
  JWT:
    in: header
    name: token
    type: apiKey
swagger: "2.0"
